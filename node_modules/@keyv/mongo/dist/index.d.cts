import EventEmitter from 'events';
import { KeyvStoreAdapter, StoredData } from 'keyv';
import { ReadPreference, GridFSBucket, Collection, Db, MongoClient } from 'mongodb';

type Options = {
    [key: string]: unknown;
    url?: string | undefined;
    collection?: string;
    namespace?: string;
    serialize?: any;
    deserialize?: any;
    useGridFS?: boolean;
    uri?: string;
    dialect?: string;
    db?: string;
    readPreference?: ReadPreference;
};
type KeyvMongoOptions = Options | string;
type KeyvMongoConnect = {
    bucket?: GridFSBucket;
    store: Collection;
    db?: Db;
    mongoClient: MongoClient;
};

declare class KeyvMongo extends EventEmitter implements KeyvStoreAdapter {
    ttlSupport: boolean;
    opts: Options;
    connect: Promise<KeyvMongoConnect>;
    namespace?: string;
    constructor(url?: KeyvMongoOptions, options?: Options);
    get<Value>(key: string): Promise<StoredData<Value>>;
    getMany<Value>(keys: string[]): Promise<StoredData<Value>[]>;
    set(key: string, value: any, ttl?: number): Promise<unknown>;
    delete(key: string): Promise<boolean>;
    deleteMany(keys: string[]): Promise<boolean>;
    clear(): Promise<void>;
    clearExpired(): Promise<boolean>;
    clearUnusedFor(seconds: number): Promise<boolean>;
    iterator(namespace?: string): AsyncGenerator<any[], void, void>;
    has(key: string): Promise<boolean>;
    disconnect(): Promise<void>;
}

export { KeyvMongo, KeyvMongo as default };
