import { PutioAPIClient } from '../../client';
import { ITransfersResponse, Transfer, NewTransferParams, NewTransferError } from './types';
export default class Tranfers {
    private client;
    constructor(client: PutioAPIClient);
    Add(params: NewTransferParams): Promise<import("../..").IPutioAPIClientResponse<{
        transfer: Transfer;
    }>>;
    AddMulti(params: NewTransferParams[]): Promise<import("../..").IPutioAPIClientResponse<{
        transfers: Transfer[];
        errors: NewTransferError[];
    }>>;
    Get(id: number): Promise<import("../..").IPutioAPIClientResponse<{
        transfer: Transfer;
    }>>;
    Query({ perPage, total }?: {
        perPage?: number;
        total?: boolean;
    }): Promise<import("../..").IPutioAPIClientResponse<ITransfersResponse>>;
    Continue(cursor: string, { perPage }?: {
        perPage?: number;
    }): Promise<import("../..").IPutioAPIClientResponse<ITransfersResponse>>;
    ClearAll(): Promise<import("../..").IPutioAPIClientResponse<{}>>;
    Cancel(ids?: number[]): Promise<import("../..").IPutioAPIClientResponse<{}>>;
    Retry(id: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Reannounce(id: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Count(): Promise<import("../..").IPutioAPIClientResponse<{
        count: number;
    }>>;
}
