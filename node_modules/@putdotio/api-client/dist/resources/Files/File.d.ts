import { PutioAPIClient } from '../../client';
import { FileConversionStatus } from './types';
export default class File {
    private client;
    constructor(client: PutioAPIClient);
    Public(oauthToken: string, { mp4StatusParent, videoMetadataParent, codecsParent, mediaInfoParent, }?: {
        mp4StatusParent?: number | undefined;
        videoMetadataParent?: number | undefined;
        codecsParent?: number | undefined;
        mediaInfoParent?: number | undefined;
    }): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Download(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    GetStorageURL(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    GetContent(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Subtitles(fileId: number, oauthToken: string, languages: string[]): Promise<import("../..").IPutioAPIClientResponse<any>>;
    GetHLSStreamURL(fileId: number, { token, subtitleLanguages, maxSubtitleCount, playOriginal, }?: {
        token?: string;
        subtitleLanguages?: string[];
        maxSubtitleCount?: number;
        playOriginal?: boolean;
    }): string;
    ConvertToMp4(fileId: number): Promise<import("../..").IPutioAPIClientResponse<{
        mp4: FileConversionStatus;
    }>>;
    ConvertStatus(fileId: number): Promise<import("../..").IPutioAPIClientResponse<{
        mp4: FileConversionStatus;
    }>>;
    DeleteMp4(fileId: number): Promise<import("../..").IPutioAPIClientResponse<{}>>;
    SharedWith(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Unshare(fileId: number, shareId: any): Promise<import("../..").IPutioAPIClientResponse<any>>;
    SaveAsMp4(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Rename(fileId: number, name: string): Promise<import("../..").IPutioAPIClientResponse<any>>;
    GetStartFrom(fileId: number): Promise<import("../..").IPutioAPIClientResponse<{
        start_from: number;
    }>>;
    SetStartFrom(fileId: number, time: string): Promise<import("../..").IPutioAPIClientResponse<any>>;
    ResetStartFrom(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    Extract(fileId: number, password?: string): Promise<import("../..").IPutioAPIClientResponse<any>>;
    CreatePublicLink(fileId: string): Promise<import("../..").IPutioAPIClientResponse<any>>;
    RevokePublicLink(id: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
    FindNextFile(fileId: number, fileType: string): Promise<import("../..").IPutioAPIClientResponse<any>>;
    FindNextVideo(fileId: number): Promise<import("../..").IPutioAPIClientResponse<any>>;
}
