interface EasyDebridGetUserDetailsResponse {
    id: string;
    paid_until: Date | null;
}
interface EasyDebridGetUserDetailsResponseAPI {
    id: string;
    paid_until: number;
}
interface EasyDebridCouponSubmitResponse {
    success: boolean;
}
interface EasyDebridLinkLookupResponse {
    cached: boolean[];
    filenames: string[][];
}
interface EasyDebridLinkLookupDetailsResponse {
    result: LinkLookupDetailsResult[];
}
interface LinkLookupDetailsResult {
    cached: boolean;
    files: LinkLookupDetailsFile[];
}
interface LinkLookupDetailsFile {
    size: number;
    name: string;
    folder: string;
}
interface EasyDebridGenerateDebridLinkResponse {
    files: GenerateDebridFile[];
}
interface GenerateDebridFile {
    filename: string;
    directory: string[];
    size: number;
    url: string;
}
interface EasyDebridErrorResponse {
    code?: string;
    message: string;
}
interface EasyDebridClientOptions {
    accessToken?: string;
    env?: "production" | "sandbox";
}
declare class EasyDebridClient {
    private readonly options;
    private apiClient;
    constructor(options: EasyDebridClientOptions);
    getAccountInfo(): Promise<EasyDebridGetUserDetailsResponse>;
    submitCoupon(coupon: string): Promise<EasyDebridCouponSubmitResponse>;
    linkLookup(urls: string[]): Promise<EasyDebridLinkLookupResponse>;
    linkLookupDetails(urls: string[]): Promise<EasyDebridLinkLookupDetailsResponse>;
    generateDebridLink(url: string): Promise<EasyDebridGenerateDebridLinkResponse>;
}

interface EasyDebridOauth2Options {
    clientId: string;
    clientSecret?: string;
    env?: "production" | "sandbox";
}
interface Oauth2TokenResponse {
    token_type: string;
    expires_in: number;
    access_token: string;
    scope: string;
}
declare const VALID_SCOPES: readonly ["full"];
type EasyDebridScope = (typeof VALID_SCOPES)[number];
declare class EasyDebridOauth2Client {
    private readonly options;
    private readonly apiClient;
    private readonly serviceUrl;
    constructor(options: EasyDebridOauth2Options);
    generateAuthorizationUrl(redirectUri: string, codeChallenge: string, codeChallengeMethod: string, state?: string, scopes?: EasyDebridScope[]): string;
    exchangeCodeForToken(code: string, redirectUri: string, codeVerifier: string): Promise<Oauth2TokenResponse>;
}

interface EasyDebridGetResellerPricesResponse {
    prices: Price[];
}
interface Price {
    price: number;
    days: number;
}
interface EasyDebridTopupResellerBalanceResponse {
    url: string;
}
interface EasyDebridGetResellerBalanceResponse {
    balance: number;
}
interface EasyDebridGenerateResellerCouponResponse {
    coupon: string;
}
interface EasyDebridListResellerCouponsResponseAPI {
    coupons: CouponAPI[];
}
interface CouponAPI {
    coupon: string;
    days: number;
    created: string;
    expires: string;
}
interface EasyDebridListResellerCouponsResponse {
    coupons: Coupon[];
}
interface Coupon {
    coupon: string;
    days: number;
    created: Date;
    expires: Date;
}
interface EasyDebridMerchantOptions {
    apiKey?: string;
    env?: "production" | "sandbox";
}
declare class EasyDebridMerchant {
    private readonly options;
    private apiClient;
    constructor(options: EasyDebridMerchantOptions);
    getResellerPrices(): Promise<EasyDebridGetResellerPricesResponse>;
    topupResellerBalance(amount: number): Promise<EasyDebridTopupResellerBalanceResponse>;
    getResellerBalance(): Promise<EasyDebridGetResellerBalanceResponse>;
    generateResellerCoupon(days: number): Promise<EasyDebridGenerateResellerCouponResponse>;
    listResellerCoupons(): Promise<EasyDebridListResellerCouponsResponse>;
}

export { type Coupon, type CouponAPI, EasyDebridClient, type EasyDebridClientOptions, type EasyDebridCouponSubmitResponse, type EasyDebridErrorResponse, type EasyDebridGenerateDebridLinkResponse, type EasyDebridGenerateResellerCouponResponse, type EasyDebridGetResellerBalanceResponse, type EasyDebridGetResellerPricesResponse, type EasyDebridGetUserDetailsResponse, type EasyDebridGetUserDetailsResponseAPI, type EasyDebridLinkLookupDetailsResponse, type EasyDebridLinkLookupResponse, type EasyDebridListResellerCouponsResponse, type EasyDebridListResellerCouponsResponseAPI, EasyDebridMerchant, type EasyDebridMerchantOptions, EasyDebridOauth2Client, type EasyDebridOauth2Options, type EasyDebridScope, type EasyDebridTopupResellerBalanceResponse, type GenerateDebridFile, type LinkLookupDetailsFile, type LinkLookupDetailsResult, type Oauth2TokenResponse, type Price, VALID_SCOPES };
