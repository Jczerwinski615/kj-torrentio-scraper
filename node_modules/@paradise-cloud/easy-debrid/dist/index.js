"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  EasyDebridClient: () => EasyDebridClient,
  EasyDebridMerchant: () => EasyDebridMerchant,
  EasyDebridOauth2Client: () => EasyDebridOauth2Client,
  VALID_SCOPES: () => VALID_SCOPES
});
module.exports = __toCommonJS(src_exports);

// src/client.ts
var import_axios2 = __toESM(require("axios"));

// src/errors.ts
var import_axios = require("axios");
var EasyDebridError = class extends Error {
  constructor(message) {
    super(message);
  }
};
var toEasyDebridError = (error) => {
  if ((0, import_axios.isAxiosError)(error)) {
    throw new EasyDebridError(
      error.response?.data.message || error.message
    );
  }
  if (error instanceof Error) {
    throw new EasyDebridError(error.message);
  }
  throw new EasyDebridError("An unknown error occurred");
};

// src/utils.ts
var PROD_HOST = "https://easydebrid.com";
var DEV_HOST = "https://dev.easydebrid.com";
function getHost(env) {
  return env === "production" ? PROD_HOST : DEV_HOST;
}
function getApiUrl(env) {
  return `${getHost(env)}/api/v1`;
}

// src/client.ts
var EasyDebridClient = class {
  constructor(options) {
    this.options = options;
    options.env = options.env || "production";
    const baseUrl = getApiUrl(options.env);
    this.apiClient = import_axios2.default.create({
      baseURL: baseUrl,
      headers: {
        "Content-Type": "application/json",
        authorization: `Bearer ${this.options.accessToken}`
      }
    });
  }
  async getAccountInfo() {
    try {
      const { data } = await this.apiClient.get(
        "/user/details"
      );
      const paidUntil = data?.paid_until ? new Date(data.paid_until * 1e3) : null;
      const transformedData = {
        ...data,
        paid_until: paidUntil
      };
      return transformedData;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async submitCoupon(coupon) {
    try {
      const { data } = await this.apiClient.post(
        "/coupon/submit",
        { coupon }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async linkLookup(urls) {
    try {
      const { data } = await this.apiClient.post(
        "/link/lookup",
        { urls }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async linkLookupDetails(urls) {
    try {
      const { data } = await this.apiClient.post(
        "/link/lookupdetails",
        { urls }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async generateDebridLink(url) {
    try {
      const { data } = await this.apiClient.post(
        "/link/generate",
        { url }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
};

// src/oauth2.ts
var import_axios3 = __toESM(require("axios"));
var VALID_SCOPES = ["full"];
var EasyDebridOauth2Client = class {
  constructor(options) {
    this.options = options;
    options.env = options.env || "production";
    this.serviceUrl = getHost(options.env);
    this.apiClient = import_axios3.default.create({
      baseURL: this.serviceUrl,
      headers: {
        "Content-Type": "application/json"
      }
    });
  }
  generateAuthorizationUrl(redirectUri, codeChallenge, codeChallengeMethod, state, scopes) {
    const params = new URLSearchParams();
    params.append("response_type", "code");
    params.append("client_id", this.options.clientId);
    params.append("redirect_uri", redirectUri);
    params.append("code_challenge", codeChallenge);
    params.append("code_challenge_method", codeChallengeMethod);
    if (state) {
      params.append("state", state);
    }
    if (scopes) {
      params.append("scope", scopes.join(" "));
    }
    return `${this.serviceUrl}/oauth/authorize?${params.toString()}`;
  }
  async exchangeCodeForToken(code, redirectUri, codeVerifier) {
    const params = new URLSearchParams();
    params.append("grant_type", "authorization_code");
    params.append("code", code);
    params.append("redirect_uri", redirectUri);
    params.append("code_verifier", codeVerifier);
    if (this.options.clientSecret) {
      params.append("client_secret", this.options.clientSecret);
    }
    try {
      const { data } = await this.apiClient.post(
        "/oauth/token",
        params,
        {
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
};

// src/merchant.ts
var import_axios4 = __toESM(require("axios"));
var EasyDebridMerchant = class {
  constructor(options) {
    this.options = options;
    options.env = options.env || "production";
    const baseUrl = getApiUrl(options.env);
    this.apiClient = import_axios4.default.create({
      baseURL: baseUrl,
      headers: {
        "Content-Type": "application/json",
        authorization: `Bearer ${this.options.apiKey}`
      }
    });
  }
  async getResellerPrices() {
    try {
      const { data } = await this.apiClient.get(
        "/reseller/prices"
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async topupResellerBalance(amount) {
    try {
      const { data } = await this.apiClient.post(
        "/reseller/topup",
        { amount }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async getResellerBalance() {
    try {
      const { data } = await this.apiClient.get(
        "/reseller/balance"
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async generateResellerCoupon(days) {
    try {
      const { data } = await this.apiClient.post(
        "/reseller/generatecoupon",
        { days }
      );
      return data;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
  async listResellerCoupons() {
    try {
      const { data } = await this.apiClient.get(
        "/reseller/coupons"
      );
      const transformedData = {
        coupons: data.coupons.map((coupon) => ({
          ...coupon,
          created: new Date(coupon.created),
          expires: new Date(coupon.expires)
        }))
      };
      return transformedData;
    } catch (error) {
      return toEasyDebridError(error);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EasyDebridClient,
  EasyDebridMerchant,
  EasyDebridOauth2Client,
  VALID_SCOPES
});
//# sourceMappingURL=index.js.map